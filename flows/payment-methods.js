
import { Markup } from 'telegraf';
import { addPaymentMethod, getPaymentMethodsForUser } from '../db.js';
import { mainKeyboard, cancelKeyboard } from '../bot/keyboards.js';

const paymentMethodsFlow = {
    start: (ctx) => {
        ctx.session.flow = 'payment_methods';
        ctx.session.step = 'menu';
        showMenu(ctx);
    },

    handle: async (ctx) => {
        const text = ctx.message.text;
        const step = ctx.session.step;

        if (text === '‚¨ÖÔ∏è Cancelar') {
            ctx.session.flow = null;
            ctx.session.step = null;
            ctx.session.paymentData = null;
            ctx.reply('Operaci√≥n cancelada. Volviendo al men√∫ principal.', mainKeyboard);
            return;
        }

        switch (step) {
            case 'menu':
                if (text === '‚ûï A√±adir Nuevo M√©todo') {
                    ctx.session.step = 'add_method_type';
                    ctx.reply('Selecciona el tipo de m√©todo de pago que deseas a√±adir:', Markup.keyboard([
                        ['PayPal', 'Zinli', 'Pago M√≥vil'],
                        ['‚¨ÖÔ∏è Cancelar']
                    ]).resize());
                } else if (text === '‚¨ÖÔ∏è Volver al Men√∫ Principal') {
                    ctx.session.flow = null;
                    ctx.reply('Volviendo al men√∫ principal.', mainKeyboard);
                }
                break;

            case 'add_method_type':
                handleMethodTypeSelection(ctx);
                break;
            case 'add_nickname':
                ctx.session.paymentData.nickname = text;
                askForDetails(ctx);
                break;
            case 'add_details_paypal_zinli':
                ctx.session.paymentData.account_details = text;
                await savePaymentMethod(ctx);
                break;
            case 'add_details_pm_identity':
                ctx.session.paymentData.pm_identity_card = text;
                ctx.session.step = 'add_details_pm_phone';
                ctx.reply('Ahora, ingresa el n√∫mero de tel√©fono afiliado al Pago M√≥vil:');
                break;
            case 'add_details_pm_phone':
                ctx.session.paymentData.pm_phone_number = text;
                ctx.session.step = 'add_details_pm_bank';
                ctx.reply('Finalmente, escribe el nombre de tu banco:');
                break;
            case 'add_details_pm_bank':
                ctx.session.paymentData.pm_bank_name = text;
                await savePaymentMethod(ctx);
                break;
        }
    }
};

async function showMenu(ctx) {
    const userId = ctx.from.id;
    const methods = await getPaymentMethodsForUser(userId);
    let message = 'üí≥ **Gesti√≥n de M√©todos de Pago**\n\n';
    if (methods.length === 0) {
        message += 'A√∫n no tienes ning√∫n m√©todo de pago guardado.';
    } else {
        message += 'Tus m√©todos de pago guardados:\n';
        methods.forEach(method => {
            message += `\n- **${method.nickname}** (${method.method_type})`;
        });
    }
    ctx.replyWithHTML(message, Markup.keyboard([
        ['‚ûï A√±adir Nuevo M√©todo'],
        ['‚¨ÖÔ∏è Volver al Men√∫ Principal']
    ]).resize());
}

function handleMethodTypeSelection(ctx) {
    const selection = ctx.message.text;
    if (!['PayPal', 'Zinli', 'Pago M√≥vil'].includes(selection)) {
        ctx.reply('Por favor, selecciona una opci√≥n v√°lida del teclado.');
        return;
    }
    // --- LA CORRECCI√ìN EST√Å AQU√ç ---
    // 'Pago M√≥vil'.replace(' ', '') se convierte en 'PagoMovil'
    ctx.session.paymentData = { method_type: selection.replace(' ', '') };
    ctx.session.step = 'add_nickname';
    ctx.reply(`Perfecto. Dale un apodo a este m√©todo (Ej: "Pago M√≥vil Personal"):`, cancelKeyboard);
}

function askForDetails(ctx) {
    const type = ctx.session.paymentData.method_type;
    if (type === 'PayPal' || type === 'Zinli') {
        ctx.session.step = 'add_details_paypal_zinli';
        ctx.reply(`Ingresa el correo electr√≥nico de tu cuenta ${type}:`);
    } else if (type === 'PagoMovil') {
        ctx.session.step = 'add_details_pm_identity';
        ctx.reply('Ahora, ingresa tu C√©dula de Identidad (V/E):');
    }
}

async function savePaymentMethod(ctx) {
    await addPaymentMethod(ctx.from.id, ctx.session.paymentData);
    ctx.reply('‚úÖ ¬°M√©todo de pago guardado exitosamente!');
    
    ctx.session.flow = null;
    ctx.session.step = null;
    ctx.session.paymentData = null;
    
    ctx.reply('¬øQu√© deseas hacer ahora?', mainKeyboard);
}

export default paymentMethodsFlow;
