
import { Markup } from 'telegraf';
import { findUserById, getTransactionHistory, getAllUserIds } from '../db.js';

// ID del administrador para comandos especiales
const ADMIN_ID = parseInt(process.env.ADMIN_ID || '0');

// --- Manejador para /start ---
const startCommand = async (ctx) => {
    const userId = ctx.from.id;
    const isRegistered = await findUserById(userId);
    let welcomeMessage;
    let keyboard;

    if (isRegistered) {
        welcomeMessage = `¬°Hola de nuevo, ${ctx.from.first_name}! üëã ¬øQu√© deseas hacer hoy?`;
        keyboard = Markup.keyboard([
            ['üíπ Realizar Cambio', 'üìú Mi Historial'],
            ['üí≥ Mis M√©todos de Pago', '‚ÑπÔ∏è Ayuda']
        ]).resize();
    } else {
        welcomeMessage = '¬°Hola! üëã Soy tu asistente de exchange. Para comenzar, por favor, reg√≠strate.';
        keyboard = Markup.keyboard([
            ['üë§ Registrarme', '‚ÑπÔ∏è Ayuda']
        ]).resize();
    }
    ctx.reply(welcomeMessage, keyboard);
};

// --- Manejador para /historial y su bot√≥n ---
const historyCommand = async (ctx) => {
    const userId = ctx.from.id;
    if (!(await findUserById(userId))) {
        return ctx.reply('Debes registrarte para poder ver tu historial.');
    }
    const history = await getTransactionHistory(userId);
    if (history.length === 0) {
        return ctx.reply('üìÇ No tienes ninguna operaci√≥n en tu historial todav√≠a.');
    }
    let message = 'üìú **Tu Historial de Operaciones Recientes:**\n\n';
    history.forEach(tx => {
        const date = new Date(tx.created_at).toLocaleString('es-ES');
        const icon = tx.transaction_type === 'Comprar' ? 'üìà' : 'üìâ';
        message += `------------------------------------\n`;
        message += `${icon} **Tipo:** ${tx.transaction_type}\n`;
        message += `üí∞ **Monto:** $${tx.total_usd}\n`;
        message += `üîµ **Estado:** ${tx.status}\n`;
        message += `üìÖ **Fecha:** ${date}\n`;
    });
    ctx.replyWithHTML(message);
};

// --- Manejador para /broadcast (Admin) ---
const broadcastCommand = async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) {
        return ctx.reply('‚ùå No tienes permiso para usar este comando.');
    }
    const message = ctx.message.text.slice('/broadcast'.length).trim();
    if (!message) {
        return ctx.reply('Por favor, escribe el mensaje. Ejemplo: `/broadcast ¬°Hola!`');
    }
    
    ctx.reply('üöÄ Iniciando el env√≠o masivo...');
    const userIds = await getAllUserIds();
    let successCount = 0;
    let errorCount = 0;
    for (const id of userIds) {
        try {
            await ctx.telegram.sendMessage(id, message);
            successCount++;
        } catch (error) {
            console.error(`Error enviando mensaje a ${id}:`, error.description);
            errorCount++;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    ctx.reply(`‚úÖ Env√≠o completado.\n\nExitosos: ${successCount}\nErrores: ${errorCount}`);
};

// --- Manejador para /help y su bot√≥n ---
const helpCommand = (ctx) => ctx.reply('Usa los botones del men√∫ para interactuar conmigo y realizar tus operaciones.');


// --- Funci√≥n principal para registrar todos los comandos ---
export function registerCommands(bot) {
    bot.start(startCommand);
    
    bot.command('historial', historyCommand);
    bot.hears('üìú Mi Historial', historyCommand);

    bot.command('help', helpCommand);
    bot.hears('‚ÑπÔ∏è Ayuda', helpCommand);

    bot.command('broadcast', broadcastCommand);
}
